@page "/"
@inject IDataAccess Data
@inject ILogger<Index> Logger

<PageTitle>Evidence</PageTitle>

<h1 class="mt-3">Evidence</h1>

<div class="row g-3 align-items-end">
    <div class="col-sm-6 col-md-4">
        <label class="form-label">Filter by Matter</label>
        <select class="form-select" @onchange="OnMatterChanged">
            <option value="0">All Matters</option>
            @foreach (var m in matters)
            {
                <option value="@m.MatterID">@m.MatterName</option>
            }
        </select>
    </div>
</div>

<table class="table table-striped table-hover mt-3">
    <thead>
        <tr>
            <th>Evidence ID</th>
            <th>Description</th>
            <th>Serial Number</th>
            <th>Matter</th>
            <th>Client</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var e in FilteredEvidence)
        {
            <tr>
                <td>@e.EvidenceID</td>
                <td>@(string.IsNullOrWhiteSpace(e.Description) ? "-" : e.Description)</td>
                <td>@(string.IsNullOrWhiteSpace(e.SerialNumber) ? "-" : e.SerialNumber)</td>
                <td>@e.Matter?.MatterName</td>
                <td>@e.Matter?.ClientName</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<MatterModel> matters = new();
    private List<EvidenceModel> allEvidence = new();
    private int selectedMatterId = 0;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing Evidence page...");

        try
        {
            Logger.LogInformation("Fetching matters...");
            matters = await Data.GetAllMattersAsync();
            Logger.LogInformation("Fetched {Count} matters", matters.Count);

            Logger.LogInformation("Fetching evidence...");
            allEvidence = await Data.GetAllEvidenceAsync();
            Logger.LogInformation("Fetched {Count} evidence records", allEvidence.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred while initializing the Evidence page.");
        }
    }

    private void OnMatterChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int matterId))
        {
            selectedMatterId = matterId;
            if (selectedMatterId == 0)
                Logger.LogInformation("Filter changed: Showing all evidence records");
            else
                Logger.LogInformation("Filter changed: Showing evidence for MatterID {MatterID}", selectedMatterId);
        }
        else
        {
            Logger.LogWarning("Invalid filter selection: {Value}", e.Value);
        }
    }

    private IEnumerable<EvidenceModel> FilteredEvidence =>
        selectedMatterId == 0 ? allEvidence : allEvidence.Where(e => e.MatterID == selectedMatterId);
}
